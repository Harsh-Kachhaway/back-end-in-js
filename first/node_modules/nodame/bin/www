#!/usr/bin/env node
// Generated by CoffeeScript 1.9.3
(function() {
  var Notification, app, colors, date_str, debug, debug_name, echo, echo_pfx, enable, get_port, http, lib, normalize_port, on_error, on_listening, path, port, start, welcome;

  lib = __dirname + "/../lib";

  var Nodame  = require(lib + '/core')
sprintf     = require('sprintf-js').sprintf
vsprintf    = require('sprintf-js').vsprintf
nodame      = new Nodame()
validate    = require(lib + '/validate');

  app = require(lib + "/app");

  debug_name = nodame.config('app.debug_name');

  debug = require('debug')(debug_name);

  http = require('http');

  path = require(lib + "/path");

  colors = require('colors');

  Notification = require(lib + "/notification");

  normalize_port = function(val) {
    var port;
    port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;
    }
    if (port >= 0) {
      return port;
    }
    return false;
  };

  get_port = function() {
    var port, port_argv, port_conf, port_env;
    port = '3000';
    port_env = process.env.PORT;
    port_conf = nodame.config('server.port');
    port_argv = nodame.argv.port;
    if (port_env != null) {
      port = port_env;
    }
    if (port_conf != null) {
      port = port_conf;
    }
    if (port_argv != null) {
      port = port_argv;
    }
    return normalize_port(port);
  };

  port = get_port();

  enable = function(bool) {
    if (bool) {
      return 'enabled';
    } else {
      return 'disabled';
    }
  };

  echo = function(str) {
    if (str == null) {
      str = '';
    }
    console.log(str);
  };

  echo_pfx = function(str) {
    var date, pfx;
    if (str == null) {
      str = '';
    }
    date = ((date_str()) + " -").green;
    pfx = "[nodame]".yellow;
    console.log(date, pfx, str);
  };

  date_str = function() {
    var date;
    date = new Date().toString().split(' ');
    return date[2] + " " + date[1] + " " + date[4];
  };

  welcome = function() {
    var APP, CFG, SYS, dev_str, device_capture, env_str, spc, stderr, stdout, ver, ver_spc;
    ver = nodame.settings.app.version;
    CFG = nodame.settings.config;
    APP = nodame.settings.app;
    SYS = nodame.settings.__systems;
    ver_spc = Array(10 - ver.length).join(' ');
    spc = Array(12).join(' ');
    env_str = nodame.env().underline.bold;
    dev_str = nodame.isDev() ? 'dev' : 'release';
    device_capture = nodame.config('view.device_capture').underline;
    stderr = path.safe(CFG.logger.clients.syslog.error_stream);
    stdout = path.safe(CFG.logger.clients.syslog.output_stream);
    echo();
    echo();
    echo((spc + "               .    " + ver_spc + " " + ver).cyan.bold);
    echo((spc + "     ,-. ,-. ,-| ,-. ,-,-. ,-.").cyan.bold);
    echo((spc + "     | | | | | | ,-| | | | |-'").cyan.bold);
    echo((spc + "     ' ' `-' `-' `-^ ' ' ' `-'").cyan.bold);
    echo((spc + " http://tokopedia.github.io/nodame").gray);
    echo();
    echo('Hi Nobita! Doraemon is serving you!'.green.bold);
    echo();
    echo_pfx(("listening to port " + port).yellow);
    echo_pfx(("running in " + env_str + " (" + dev_str + " mode)").yellow);
    echo_pfx(("device capture is " + (enable(device_capture))).yellow);
    echo_pfx(("reading config " + SYS.configPath).yellow);
    echo_pfx(("reading stderr " + stderr).yellow);
    echo_pfx(("reading stdout " + stdout).yellow);
    echo_pfx((CFG.url.hostname + " is ready").green.bold);
    echo();
  };

  start = function(app) {
    var notification, server, title;
    server = http.createServer(app);
    server.listen(port);
    server.on('error', on_error);
    server.on('listening', on_listening);
    welcome();
    notification = new Notification();
    title = 'restarted';
    notification.send(title);
  };

  on_error = function(error) {
    var bind;
    if (error.syscall !== 'listen') {
      throw error;
    }
    bind = typeof port === 'string' ? 'Pipe' : 'Port';
    bind = bind + " " + port;
    switch (error.code) {
      case 'EACCES':
        console.error((bind + " requires elevated privileges").red);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error((bind + " is already in use").red);
        process.exit(1);
        break;
      default:
        throw error;
    }
  };

  on_listening = function() {
    var bind;
    bind = typeof port === 'string' ? "pipe" : "port";
    debug("Listening on " + bind + " " + port);
  };

  app.set('port', port);

  start(app);

}).call(this);
