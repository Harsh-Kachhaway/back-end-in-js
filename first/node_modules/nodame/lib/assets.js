// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Assets, Path;

  Path = require('./path');

  Assets = (function() {
    var start;

    start = 0;

    function Assets(opt) {
      this._DESKTOP = 'desktop';
      this._MOBILE = 'mobile';
      this._CSS = 'css';
      this._JS = 'js';
      this._type = this._CSS;
      this._module = void 0;
      this._appPath = opt.appPath;
      this._isDev = opt.isDev;
      this._url = opt.url;
      this._assets = opt.assets;
      this._dir = opt.dir;
      this._device = nodame.config('view.adaptive') ? opt.device : this._DESKTOP;
      if (nodame.settings.assets_groups == null) {
        nodame.set('assets_groups', {});
      }
    }

    Assets.prototype.css = function(mod, loadType) {
      return this._get_assets(this._CSS, mod, loadType);
    };

    Assets.prototype.js = function(mod, loadType) {
      return this._get_assets(this._JS, mod, loadType);
    };

    Assets.prototype._get_assets = function(type, mod, loadType) {
      var assets, assetsName, cache, cache_key;
      if (this._device !== this._DESKTOP) {
        this._device = this._MOBILE;
      }
      this._type = type;
      this._module = mod;
      cache_key = this._device + "." + this._type + "." + this._module;
      cache = nodame.settings.assets_groups[cache_key];
      if (cache != null) {
        return cache;
      }
      assets = [];
      assetsName = this._get_valid_name('global');
      assets.push(this._html(assetsName, loadType));
      assetsName = this._get_valid_name(this._module);
      if (assetsName != null) {
        assets.push(this._html(assetsName, loadType));
      }
      return nodame.settings.assets_groups[cache_key] = assets.join('');
    };

    Assets.prototype._get_valid_name = function(mod) {
      var _name, i, name, re, type;
      type = this._type;
      name = this._get_name(mod).replace(/[.][a-z]+$/gi, '');
      re = new RegExp(name, 'gi');
      for (i in this._assets[type]) {
        for (_name in this._assets[type][i]) {
          if (_name.match(re)) {
            return _name;
          }
        }
      }
    };

    Assets.prototype._get_config_dir = function() {
      var confDir;
      confDir = this._dir;
      if (confDir.substr(0, 1) === '/') {
        confDir = confDir;
      } else {
        confDir = Path.safe(this._appPath + "/" + confDir);
      }
      return confDir;
    };

    Assets.prototype._get_name = function(mod) {
      return this._device + "." + mod + ".min." + this._type;
    };

    Assets.prototype._html = function(name, loadType) {
      var _html, data, device, filepath, i, j, module, split_filename;
      data = this._assets[this._type];
      _html = [];
      if (this._isDev) {
        for (i in data) {
          if (data[i][name] != null) {
            for (j in data[i][name]) {
              filepath = data[i][name][j];
              _html.push(this._html_tag(this._type, filepath, loadType));
            }
          }
        }
      } else {
        _html.push(this._html_tag(this._type, name, loadType));
      }
      split_filename = name.split('.');
      device = split_filename[0];
      module = split_filename[1];
      return _html.join('');
    };

    Assets.prototype._html_tag = function(type, filepath, loadType) {
      var _html, configDir, typeDir;
      configDir = this._get_config_dir();
      typeDir = this._isDev ? this._type : 'min';
      filepath = this._url + "/" + typeDir + "/" + filepath;
      loadType = loadType ? loadType : '';
      switch (type) {
        case this._CSS:
          _html = "<link href=\"" + filepath + "\" type=\"text/css\" rel=\"stylesheet\">";
          break;
        case this._JS:
          _html = "<script src=\"" + filepath + "\" type=\"text/javascript\" " + loadType + "></script>";
      }
      return _html;
    };

    return Assets;

  })();

  module.exports = Assets;

}).call(this);
