// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var File, YAMLParser, fs, path, sha512;

  sha512 = require('js-sha512').sha512;

  fs = require('fs');

  path = require('./path');

  YAMLParser = require('js-yaml');

  File = (function() {
    function File() {}

    File.prototype.readJSON = function(filepath) {
      if (!fs.statSync(filepath)) {
        return;
      }
      return JSON.parse(fs.readFileSync(filepath));
    };

    File.prototype.readGRUNT = function(filepath) {
      var _filepath, assetsDir, baseDir, baseName, confDir, config, dest, destSrc, filename, group, groups, grunt, hash, j, json, type, typeDir;
      json = this.readYAML(filepath);
      confDir = path.dirname(filepath);
      config = this.readYAML(confDir + "/main.yaml");
      assetsDir = path.safe(path.app + "/assets");
      if (config.assets.dir != null) {
        assetsDir = config.assets.dir.substr(0, 1) === '/' ? config.assets.dir : path.safe(path.app + "/" + config.assets.dir);
      }
      grunt = {};
      typeDir = {
        css: 'css',
        js: 'scripts'
      };
      for (groups in json) {
        for (group in json[groups]) {
          for (type in json[groups][group]) {
            if (grunt[type] == null) {
              grunt[type] = [];
            }
            baseName = groups + "." + group;
            hash = this._hash("" + baseName + type, 8);
            dest = baseName + ".min." + hash + "." + type;
            destSrc = {};
            destSrc[dest] = [];
            baseDir = '';
            if (json[groups][group][type].length > 0) {
              for (j in json[groups][group][type]) {
                filename = json[groups][group][type][j];
                if (filename != null) {
                  _filepath = "" + baseDir + json[groups][group][type][j];
                  destSrc[dest].push(_filepath);
                }
              }
              grunt[type].push(destSrc);
            }
          }
        }
      }
      return grunt;
    };

    File.prototype._hash = function(str, len) {
      var hash, lenMed, start;
      hash = sha512("" + str + (new Date()));
      if ((len != null) && len < hash.length) {
        lenMed = Math.floor(hash.length / 2);
        start = len < lenMed ? lenMed - (Math.floor(len / 2)) : 0;
        hash = hash.substr(start, len);
      }
      return hash;
    };

    File.prototype.readYAML = function(filepath) {
      if (!fs.statSync(filepath)) {
        return;
      }
      return YAMLParser.safeLoad(fs.readFileSync(filepath));
    };

    return File;

  })();

  module.exports = new File();

}).call(this);
