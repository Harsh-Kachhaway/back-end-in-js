// Generated by CoffeeScript 1.9.3
(function() {
  var Path, Swig, View;

  Path = require('./path');

  Swig = require('./swig');

  View = (function() {
    function View(app) {
      var cache, dir, engine;
      if (app != null) {
        engine = 'html';
        dir = 'views';
        cache = !nodame.isDev();
        app.engine('html', Swig.renderFile);
        app.set('views', Path.safe(dir));
        app.set('view engine', engine);
        if (cache) {
          Swig.setDefaults({
            locals: this._locals
          });
        } else {
          app.set('view cache', cache);
          Swig.setDefaults({
            locals: this._locals,
            cache: cache
          });
        }
        Swig.setFilter('push', this._filterPush);
        Swig.setFilter('range', this._filterRange);
        Swig.setFilter('even', this._filterEven);
      }
      return;
    }

    View.prototype._locals = {
      currentYear: (new Date()).getFullYear(),
      is_dev: nodame.isDev(),
      menu: nodame.config('menu')
    };

    View.prototype.path = function(req, moduleName, file) {
      var device, mobile, ref, template;
      template = nodame.config('view.default_template');
      device = 'desktop';
      mobile = nodame.config('view.adaptive');
      if (((req != null ? (ref = req.device) != null ? ref.type : void 0 : void 0) != null) && (req.device.type === 'phone' || req.device.type === 'tablet') && mobile) {
        device = 'mobile';
      }
      return Path.join(device, template, moduleName, file);
    };

    View.prototype._filterPush = function(input, val) {
      input.push(val);
      return input;
    };

    View.prototype._filterRange = function(input, start, end, step) {
      var x;
      if (step == null) {
        step = 1;
      }
      if (step === 0) {
        throw TypeError('Step cannot be zero');
      }
      if (!((start != null) || (end != null))) {
        throw TypeError('Start and end must be defined');
      }
      if (end < start) {
        step = -step;
      }
      switch (typeof start) {
        case 'number':
          return (function() {
            var i, ref, ref1, ref2, results;
            results = [];
            for (x = i = ref = start, ref1 = end, ref2 = step; ref2 > 0 ? i <= ref1 : i >= ref1; x = i += ref2) {
              results.push(x);
            }
            return results;
          })();
        case 'string':
          if (!(start.length === 1 || end.length === 1)) {
            throw TypeError("Only support byte. start = " + start + ", end = " + end);
          }
          start = start.charCodeAt(0);
          end = end.charCodeAt(0);
          return (function() {
            var i, ref, ref1, ref2, results;
            results = [];
            for (x = i = ref = start, ref1 = end, ref2 = step; ref2 > 0 ? i <= ref1 : i >= ref1; x = i += ref2) {
              results.push(String.fromCharCode(x));
            }
            return results;
          })();
        default:
          throw TypeError('Only support byte and number');
      }
    };

    View.prototype._filterEven = function(input) {
      return input % 2 === 0;
    };

    return View;

  })();

  module.exports = View;

}).call(this);
