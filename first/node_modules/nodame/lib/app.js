// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https:#github.com/hkyo89>
 * @link    https:#github.com/tokopedia/nodame
 * @license http:#opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Async, BodyParser, CONFIG, CookieParser, ExpressDevice, File, Locals, Logger, MethodOverride, Package, Parser, Path, Router, ServeStatic, View, XMLBodyParser, YAMLParser, app, app_path, assets, assets_file, assets_stream, block_favicon, build_data, build_data_stream, enforce_mobile, enforce_secure, fs, hook, is_dev, j, len, local_path_helper, locals, module_root, package_path, ref, server_maintenance, setHeaders, static_dir, static_route, timeout_func;

  process.on('uncaughtException', function(err) {
    return console.log('Caught exception: ', err);
  });

  timeout_func = function() {
    return console.log('Caught something');
  };

  setTimeout(timeout_func, 500);

  CookieParser = require('cookie-parser');

  BodyParser = require('body-parser');

  XMLBodyParser = require('express-xml-bodyparser');

  MethodOverride = require('method-override');

  ExpressDevice = require('express-device');

  YAMLParser = require('js-yaml');

  fs = require('fs');

  Async = require('async');

  Router = require('./router');

  View = require('./view');

  Locals = require('./locals');

  Path = require('./path');

  File = require('./file');

  Logger = require('./logger');

  Parser = require('./parser');

  app = nodame.express();

  app.env = nodame.env();

  package_path = Path.safe((nodame.sysPath()) + "/package.json");

  Package = File.readJSON(package_path);

  nodame.set('app', {
    name: Package.name,
    version: Package.version,
    homepage: Package.homepage,
    authors: Package.authors,
    license: Package.license
  });

  is_dev = nodame.isDev();

  app_path = nodame.appPath();

  CONFIG = nodame.config();

  app.set('trust proxy', 'uniquelocal');

  app.enable('trust proxy');

  assets_file = is_dev ? 'assets.yaml' : '.assets';

  assets_stream = Path.safe(app_path + "/configs/" + assets_file);

  if (is_dev) {
    assets = fs.readFileSync(assets_stream);
    assets = YAMLParser.safeLoad(assets);
    assets = Parser.to_grunt(assets);
  } else {
    assets = File.readJSON(assets_stream);
  }

  nodame.set('assets', assets);

  build_data_stream = Path.safe(app_path + "/configs/.build");

  build_data = File.readJSON(build_data_stream);

  nodame.set('build', build_data);

  app.set('x-powered-by', CONFIG.server.powered_by);

  if (CONFIG.view.device_capture) {
    app.use(ExpressDevice.capture());
  }

  app.use(Logger.error());

  app.use(Logger.output());

  block_favicon = function(req, res, next) {
    if (req.url === '/favicon.ico') {
      res.writeHead(200, {
        'Content-Type': 'image/x-icon'
      });
      res.end();
    } else {
      next();
    }
  };

  if (CONFIG.server.block_favicon) {
    app.use(block_favicon);
  }

  if (CONFIG.assets.enable_server) {
    ServeStatic = require('serve-static');
    module_root = CONFIG.module.root;
    if (module_root[0] !== '/') {
      module_root = "/" + module_root;
    }
    static_route = CONFIG.assets.route;
    if (static_route[0] === '/') {
      static_route = static_route.substr(1);
    }
    static_route = module_root + "/" + static_route;
    static_dir = Path.safe(app_path + "/" + CONFIG.assets.dir);
    app.use(static_route, ServeStatic(static_dir));
  }

  setHeaders = function(res, path) {
    if (path.match(/.svgz$/)) {
      return res.setHeader('Content-Encoding', 'gzip');
    }
  };

  new View(app);

  enforce_secure = function(req, res, next) {
    if (!(is_dev && req.secure)) {
      res.redirect("" + CONFIG.url.hostname + req.originalUrl);
      next = false;
    }
    if (next) {
      return next();
    }
  };

  if (!is_dev && CONFIG.server.enforce_secure) {
    app.use(enforce_secure);
  }

  app.use(BodyParser.json());

  app.use(BodyParser.urlencoded({
    extended: false
  }));

  app.use(XMLBodyParser());

  app.use(CookieParser(nodame.config('cookie.secret')));

  app.use(MethodOverride());

  locals = new Locals();

  locals.set(app);

  require('./locale')(app);

  require('./numeral')(app);

  enforce_mobile = CONFIG.view.device_capture && CONFIG.view.enforce_mobile;

  if (enforce_mobile) {
    app.use(nodame.enforce_mobile());
  }

  local_path_helper = function(req, res, next) {
    var appName, fullpath;
    fullpath = req.originalUrl;
    appName = CONFIG.app.name;
    res.locals.path = {
      full: fullpath,
      module: fullpath.replace("/" + appName, '')
    };
    if (next) {
      return next();
    }
  };

  app.use(nodame.locals(app));

  app.use(local_path_helper);

  server_maintenance = function(req, res, next) {
    var Render, i, j, len, module, ref, render;
    if (next && nodame.is_whitelist(req.ips)) {
      return next();
    }
    if (CONFIG.server.partial_maintenance) {
      ref = CONFIG.server.module_maintenance;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        module = ref[i];
        if (req.url.indexOf(CONFIG.app.name + '/' + module) >= 0) {
          break;
        }
        if (i + 1 === CONFIG.server.module_maintenance.length) {
          return next();
        }
      }
    }
    Render = require('./render');
    render = new Render(req, res);
    Async.waterfall([
      (function(_this) {
        return function(cb) {
          return render.cache("error:maintenance", true, cb);
        };
      })(this)
    ], (function(_this) {
      return function(err, is_cache) {
        render.path('errors/503');
        render.code(503);
        render.send();
        return void 0;
      };
    })(this));
  };

  if (CONFIG.server.maintenance) {
    app.use(server_maintenance);
  }

  new Router(app);

  if (CONFIG.server.hooks.length > 0) {
    ref = CONFIG.server.hooks;
    for (j = 0, len = ref.length; j < len; j++) {
      hook = ref[j];
      nodame.require("hook/" + hook);
    }
  }

  require('./error')(app);

  module.exports = app;

}).call(this);
