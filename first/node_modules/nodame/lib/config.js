// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 2.0.0
 */

(function() {
  var Config, Parser, YAMLParser, fs, path;

  path = require('./path');

  Parser = require('./parser');

  YAMLParser = require('js-yaml');

  fs = require('fs');

  Config = (function() {
    Config.prototype._keys = ['module', 'menu'];

    Config.prototype._MODULE = 0;

    Config.prototype._MENU = 1;

    Config.prototype.config = {};

    Config.prototype.config_path = '';

    function Config(argv, appPath) {
      var config_file;
      if (appPath == null) {
        appPath = '';
      }
      this._argv = argv;
      this._path = appPath;
      this.config_path = this._get_path();
      config_file = fs.readFileSync(this.config_path);
      this.config = YAMLParser.safeLoad(config_file);
      this._assign_default(this.config);
      Parser.parse_var(this.config);
      return;
    }

    Config.prototype._get_path = function() {
      var stream;
      stream = path.safe(this._path + "/configs/main.yaml");
      if (this._argv == null) {
        throw 'nodame/config requires nodame/argv to be ran first.';
      }
      if (this._argv.config != null) {
        if (this._argv.config.substring(0, 1) !== '/') {
          stream = path.safe(this._path + "/" + this._argv.config);
        } else {
          stream = path.safe(this._argv.config);
        }
      }
      return stream;
    };

    Config.prototype._get_default_config = function() {
      var cfgPath;
      cfgPath = path.join(__dirname, 'config.json');
      return require(cfgPath);
    };

    Config.prototype._assign_default = function() {
      var defCfg;
      defCfg = this._get_default_config();
      this._pair_config(defCfg, this.config);
      this._assign_default_mod(defCfg, this.config, this._MODULE);
      this._assign_default_mod(defCfg, this.config, this._MENU);
    };

    Config.prototype._pair_config = function(obj1, obj2) {
      var prop;
      for (prop in obj1) {
        if (typeof obj1[prop] === 'object') {
          if (prop !== '__default') {
            if (obj2[prop] == null) {
              obj2[prop] = obj1[prop];
            } else {
              this._pair_config(obj1[prop], obj2[prop]);
            }
          }
        } else {
          if (obj2[prop] == null) {
            obj2[prop] = obj1[prop];
          }
        }
      }
    };

    Config.prototype._assign_default_mod = function(obj1, obj2, key) {
      var defObj, item, prop, val;
      key = this._keys[key];
      defObj = obj1[key].items.__default;
      for (item in obj2[key].items) {
        for (prop in defObj) {
          if (obj2[key].items[item][prop] == null) {
            if (prop === 'font_icon') {
              val = item;
            } else {
              val = defObj[prop];
            }
            obj2[key].items[item][prop] = val;
          }
        }
      }
    };

    return Config;

  })();

  module.exports = Config;

}).call(this);
