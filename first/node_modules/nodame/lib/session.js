// Generated by CoffeeScript 1.9.3

/*
 * @author   Argi Karunia <arugikaru@yahoo.co.jp>
 * @link     https://gihtub.com/tokopedia/Nodame
 * @license  http://opensource.org/licenses/maintenance
 *
 * @version  1.2.0
 */

(function() {
  var APP, ASSETS, Async, CACHE, COOKIE, Hash, MODULES, Redis, Render, SESSION, Session, URL,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SESSION = nodame.config('session');

  CACHE = nodame.config('cache');

  COOKIE = nodame.config('cookie');

  MODULES = nodame.config('module');

  ASSETS = nodame.config('assets');

  URL = nodame.config('url');

  APP = nodame.config('app');

  Render = require('./render');

  Hash = require('js-sha512');

  Redis = require('./redis');

  Async = require('async');

  Session = (function() {

    /*
     * @constructor
     */
    function Session(req, res) {
      this.middleware = bind(this.middleware, this);
      this._key = SESSION.key;
      this._identifier = APP.name + "/session";
      this._domain = "." + SESSION.domain;
      this._options = {
        domain: this._domain,
        httpOnly: true,
        expires: new Date(Date.now() + SESSION.expires * 1000),
        signed: true
      };
      this._option_domain = {
        domain: this._domain
      };
      if ((req != null) && (res != null)) {
        this.middleware(req, res);
      }
      return;
    }


    /*
     * @method Check if session is enabled and ready
     * @throw  Error if not ready
     * @return bool
     */

    Session.prototype._is_enable = function() {
      var client, db_server;
      if (!SESSION.enable) {
        return false;
      }
      db_server = CACHE.db_server;
      if (!CACHE.db[db_server].enable) {
        throw new Error(db_server + " is not enabled");
      }
      client = CACHE.db[db_server];
      if ((client.host == null) || (client.port == null)) {
        throw new Error("Missing host or port config for " + db_server);
      }
      return true;
    };


    /*
     * @method Evaluate if session is enabled
     * @private
     * @throw  error if session method is used when disabled
     */

    Session.prototype._evaluate_session_enable = function() {
      if (!this._is_enable()) {
        throw new Error("You are using session method while session isn't enabled by config");
      }
    };


    /*
     * @method Register middleware function
     * @public
     * @param  object  request object
     * @param  object  response object
     * @param  object  optional  next object
     */

    Session.prototype.middleware = function(req1, res1, next) {
      var path_idx, redis, redis_key;
      this.req = req1;
      this.res = res1;
      if (!this._is_enable()) {
        if (next != null) {
          return next();
        }
        return;
      }
      if (next == null) {
        return;
      }
      if (this.req.path == null) {
        return next();
      }
      this.__paths = this.req.path.split('/');
      if (this.__paths[1] == null) {
        return next();
      }
      path_idx = ("/" + this.__paths[1]) === MODULES.root ? 2 : 1;
      this.__path = this.__paths[path_idx] || '';
      if (this.__path === 'ajax') {
        this.__path = this.__paths[path_idx + 1] || '';
      }
      if (this.__path === '') {
        this.__path = MODULES["default"];
      }
      if (MODULES.items[this.__path] == null) {
        return next();
      }
      this._mod = MODULES.items[this.__path];
      redis_key = this._get_redis_key();
      redis = Redis.client();
      Async.waterfall([
        (function(_this) {
          return function(cb) {
            return redis.get(redis_key, cb);
          };
        })(this)
      ], (function(_this) {
        return function(err, reply) {
          var session;
          if (err == null) {
            if (reply != null) {
              session = JSON.parse(reply);
            }
          }
          _this._evaluate_session(session);
          if (!_this._evaluate_access()) {
            err = new Error('Unauthorized access.');
            err.status = 404;
            return next(err);
          } else {
            return next();
          }
        };
      })(this));
      return void 0;
    };


    /*
     * @method Evaluate existence of session
     * @private
     */

    Session.prototype._evaluate_session = function(session) {
      if (this._is_alive()) {
        return this._register_session(session);
      }
      return this._register_session();
    };


    /*
     * @method Register session to environment
     * @private
     */

    Session.prototype._register_session = function(session) {
      if (session != null) {
        this.req.session = session;
        this.res.locals.session = session;
        this.req.is_auth = true;
        this.res.locals.is_auth = true;
      } else {
        this.req.session = {};
        this.res.locals.session = {};
        this.req.is_auth = false;
        this.res.locals.is_auth = false;
      }
    };


    /*
     * @method Evaluate access
     * @private
     * @return bool
     */

    Session.prototype._evaluate_access = function() {
      if (this._mod.auth_only || this._mod.guest_only) {
        if (this._mod.auth_only && !this.req.is_auth) {
          return false;
        }
        if (this._mod.guest_only && this.req.is_auth) {
          return false;
        }
      }
      return true;
    };


    /*
     * @method Check session existence
     * @private
     * @return bool
     */

    Session.prototype._is_alive = function() {
      return this.req.cookies[this._key] != null || this.req.signedCookies[this._key] != null;
    };


    /*
     * @method Generate session id
     * @private
     * @param  object  session
     * @return string
     */

    Session.prototype._generate_session_id = function(session) {
      var session_id;
      session_id = this.req.cookies[this._key] || this.req.signedCookies[this._key];
      return session_id;
    };


    /*
     * @method Generate redis key
     * @private
     * @return string
     */

    Session.prototype._generate_redis_key = function(session_id) {
      return this._identifier + "-" + session_id;
    };


    /*
     * @method Get session id
     * @public
     * @return string
     */

    Session.prototype.get_session_id = function() {
      this._evaluate_session_enable();
      return this.req.cookies[this._key] || this.req.signedCookies[this._key];
    };


    /*
     * @method Establish new session
     * @public
     * @param  object
     */

    Session.prototype.set = function(session, callback) {
      var redis, redis_key, session_id;
      this._evaluate_session_enable();
      session_id = this._generate_session_id(session);
      if (!session_id) {
        return callback();
      }
      redis_key = this._generate_redis_key(session_id);
      this.res.cookie(this._key, session_id, this._options);
      redis = Redis.client();
      redis.set([redis_key, JSON.stringify(session)], function(err, result) {
        redis.expire(redis_key, SESSION.expires);
        if (err != null) {
          return callback(err, void 0);
        }
        return callback(null, session_id);
      });
    };


    /*
     * @method Get redis Keys
     * @private
     * @return string redis_key
     */

    Session.prototype._get_redis_key = function() {
      var session_id;
      session_id = this.get_session_id();
      return this._generate_redis_key(session_id);
    };


    /*
     * @method Get session
     * @public
     * @return callback session
     */

    Session.prototype.get = function(callback) {
      var redis, redis_key;
      redis_key = this._get_redis_key();
      redis = Redis.client();
      redis.get(redis_key, function(err, reply) {
        callback(err, reply);
        return void 0;
      });
    };


    /*
     * @method Destroy session
     * @public
     */

    Session.prototype.clear = function() {
      var redis, redis_key;
      this._evaluate_session_enable();
      redis_key = this._get_redis_key();
      this.res.clearCookie(this._key, this._option_domain);
      redis = Redis.client();
      redis.del(redis_key);
    };

    return Session;

  })();

  module.exports = Session;

}).call(this);
