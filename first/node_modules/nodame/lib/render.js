// Generated by CoffeeScript 1.9.3

/*
 * @author   Argi Karunia <arugikaru@yahoo.co.jp>
 * @author   Originally by Teddy Hong <teddy.hong11@gmail.com>
 * @link     https://github.com/tokopedia/Nodame
 * @license  http://opensource.org/licenses/MIT
 *
 * @version  1.2.0
 */

(function() {
  var APP, Async, COOKIE, Path, Redis, Render, UUID, VIEW;

  Path = require('./path');

  UUID = require('node-uuid');

  Redis = require('./redis');

  Async = require('async');

  APP = nodame.config('app');

  VIEW = nodame.config('view');

  COOKIE = nodame.config('cookie');

  Render = (function() {

    /*
     * @constructor
     */
    function Render(req, res) {
      this.req = req;
      this.res = res;
      this.__locals = {};
      this.__locals.locales = [];
      this.set('page_title', APP.title);
      this.__file = 'index';
      this.__cache_data = false;
      this.__sent = false;
      return;
    }


    /*
     * @method Set local variable
     * @public
     * @param  string  key
     * @param  object  value
     */

    Render.prototype.set = function(key, val, is_array) {
      var ref;
      if (is_array == null) {
        is_array = false;
      }
      if (is_array) {
        this.__locals[key] = (ref = this.__locals[key]) != null ? ref : [];
        this.__locals[key].push(val);
      } else {
        this.__locals[key] = val;
      }
      return this;
    };


    /*
     * @method Set local variable
     * @public
     * @param  string  page title
     * @param  int     page number
     */

    Render.prototype.title = function(title, page_num) {
      var default_title, page_text, separator;
      separator = APP.title_separator;
      default_title = APP.title;
      page_text = 'Halaman';
      title = title + " " + separator + " " + default_title;
      if (page_num != null) {
        title = title + ", " + page_text + " " + page_num;
      }
      return this.set('page_title', title);
    };


    /*
     * @method Set menu
     * @public
     * @param  string  active menu
     */

    Render.prototype.menu = function(active_menu) {
      if (active_menu == null) {
        throw new Error('Missing active_menu args');
      }
      return this.set('active_menu', {
        active: active_menu
      });
    };


    /*
     * @method Set assets name
     * @public
     * @param  string  assets name
     */

    Render.prototype.assets = function(assets_name) {
      if (assets_name == null) {
        throw new Error('Missing assets_name args');
      }
      return this.set('assets_name', assets_name);
    };


    /*
     * @method Set locale
     * @public
     * @param  string  locale
     */

    Render.prototype.locale = function(name) {
      if (name == null) {
        throw new Erorr('Missing locale args');
      }
      if (this.__locals.locales.indexOf(name) === -1) {
        this.__locals.locales.push(name);
      }
      return this;
    };


    /*
     * @method Set locales
     * @public
     * @param  object  locales
     */

    Render.prototype.locales = function(locales) {
      var i, len, name;
      if (locales == null) {
        throw new Erorr('Missing locales args');
      }
      if (typeof locales === 'object') {
        for (i = 0, len = locales.length; i < len; i++) {
          name = locales[i];
          this.locale(name);
        }
      } else {
        this.locale(locales);
      }
      return this;
    };


    /*
     * @method Set module name
     * @public
     * @param  string  method name
     */

    Render.prototype.module = function(__module) {
      this.__module = __module;
      if (this.__module == null) {
        throw new Error('Missing module args');
      }
      return this;
    };


    /*
     * @method Set file name
     * @public
     * @param  string  file name
     */

    Render.prototype.file = function(__file) {
      this.__file = __file;
      if (this.__file == null) {
        throw new Error('Missing file args');
      }
      return this;
    };


    /*
     * @method Set view path
     * @public
     * @param  string  path
     */

    Render.prototype.path = function(path) {
      var adaptive, default_template, device, ref, template;
      if (path == null) {
        throw new Error('Missing path args');
      }
      default_template = VIEW.default_template;
      template = VIEW.template;
      device = VIEW.default_device;
      adaptive = VIEW.adaptive;
      if ((((ref = this.req.device) != null ? ref.type : void 0) != null) && (this.req.device.type === 'phone' || this.req.device.type === 'tablet') && adaptive) {
        device = 'mobile';
      }
      if (template == null) {
        template = default_template;
      }
      this.__view_path = Path.join(device, template, path);
      return this;
    };


    /*
     * @method set status code
     * @public
     * @param int status code
     */

    Render.prototype.code = function(status_code) {
      this.res.status(status_code);
      return this;
    };


    /*
     * @method Cache view
     * @public
     * @param str key
     * @param obj value
     */

    Render.prototype.cache = function(key, is_cache, callback) {
      var build_time, is_purge, purge_time, redis, redis_hash_key, redis_key, time, time_diff;
      if (key == null) {
        key = '';
      }
      if (is_cache == null) {
        is_cache = true;
      }
      build_time = nodame.settings.build.time;
      time = Math.floor(Date.now() / 1000);
      purge_time = nodame.config('view.purge_time');
      time_diff = time - build_time;
      is_purge = time_diff < purge_time;
      redis_key = APP.name + "::render::" + key;
      if (!is_cache || is_purge || !nodame.config('view.cache')) {
        if (is_purge && is_cache && nodame.config('view.cache')) {
          this.__cache_key = redis_key;
        }
        return callback(null, false);
      }
      redis = Redis.client();
      redis_hash_key = this.req.device.type + "," + this.req.__device.type;
      Async.waterfall([
        (function(_this) {
          return function(cb) {
            return redis.hget(redis_key, redis_hash_key, cb);
          };
        })(this)
      ], (function(_this) {
        return function(err, data) {
          if (data != null) {
            _this.__cache_data = data.toString();
            return callback(null, true);
          }
          _this.__cache_key = redis_key;
          return callback(null, false);
        };
      })(this));
    };


    /*
     * @method write JSON response
     * @public
     * @param  str JSON
     */

    Render.prototype.json = function(obj) {
      if (this.__sent) {
        this.res.end();
        return void 0;
      }
      if (typeof obj !== 'string') {
        obj = JSON.stringify(obj);
      }
      this.__cache(obj);
      this.res.set('Content-Type: application/json');
      this.__sent = true;
      this.res.send(obj);
      return void 0;
    };


    /*
     * @method write response
     * @public
     */

    Render.prototype.send = function(callback) {
      if (this.__sent) {
        return this.res.end();
      }
      Async.series([
        (function(_this) {
          return function(cb) {
            return _this.__check_interstitial(cb);
          };
        })(this)
      ], (function(_this) {
        return function(err, data) {
          _this.res.clearCookie('fm', {
            domain: "." + COOKIE.domain
          });
          if (_this.__cache_data) {
            _this.res.send(_this.__cache_data);
            return _this.res.end();
          }
          if (_this.__view_path == null) {
            _this.res.send('View path is undefined. Please report to us.');
            return _this.res.end();
          }
          _this.__sent = true;
          Async.waterfall([
            function(cb) {
              return _this.res.render(_this.__view_path, _this.__locals, cb);
            }
          ], function(__err, html) {
            _this.__cache(html);
            if (callback != null) {
              return callback(__err, html);
            }
            _this.res.send(html);
            return _this.res.end();
          });
        };
      })(this));
    };


    /*
     * @method cache to redis
     * @private
     * @params obj Object
     */

    Render.prototype.__cache = function(obj) {
      var redis;
      if (this.__cache_key) {
        redis = Redis.client();
        redis.hmset(this.__cache_key, this.req.device.type + "," + this.req.__device.type, obj);
        redis.expire(this.__cache_key, nodame.config('view.cache_time'));
      }
      return void 0;
    };


    /*
     * @method Pass interstitial view
     * @public
     * @param str key
     * @param obj value
     */

    Render.prototype.interstitial = function(key, val, url) {
      var fm, keyFm, redis;
      fm = this.req.cookies.fm;
      if (!fm) {
        fm = UUID.v4();
        this.res.cookie('fm', fm, {
          domain: "." + COOKIE.domain,
          expires: new Date(Date.now() + 600000),
          httpOnly: true
        });
      }
      redis = Redis.client();
      keyFm = APP.name + ":flashMessages:" + fm;
      redis.set(keyFm, JSON.stringify({
        type: key,
        text: val
      }));
      redis.expire(keyFm, 600);
      this.res.redirect(url);
      return void 0;
    };


    /*
     * @method Check interstitial
     * @private
     * @param callback
     */

    Render.prototype.__check_interstitial = function(cb) {
      var e, fm, keyFm, redis;
      try {
        fm = this.req.cookies.fm;
        redis = Redis.client();
        keyFm = APP.name + ":flashMessages:" + fm;
        redis.get(keyFm, (function(_this) {
          return function(err, reply) {
            if (reply) {
              redis.del(keyFm);
              reply = JSON.parse(reply);
              _this.message(reply.type, reply.text);
            }
            cb(null);
          };
        })(this));
      } catch (_error) {
        e = _error;
        cb(e);
        console.log(e);
      }
    };


    /*
     * @method Pass message
     * @public
     * @param str key
     * @param obj value
     */

    Render.prototype.message = function(key, val) {
      var messages;
      messages = {
        type: key,
        text: val
      };
      this.set('messages', messages, true);
      return void 0;
    };


    /*
     * @method Render 404
     * @public
     */

    Render.prototype.error_404 = function() {
      this.path('errors/404');
      return this.send();
    };

    return Render;

  })();

  module.exports = Render;

}).call(this);
