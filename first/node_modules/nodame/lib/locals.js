// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Assets, DateParser, Locals, Numeral;

  Assets = require('./assets');

  Numeral = require('numeral');

  DateParser = require('./date');

  Locals = (function() {
    function Locals() {}

    Locals.prototype.set = function(app) {
      var config, configs, key, results;
      configs = {
        url: nodame.config('url'),
        app: nodame.config('app'),
        assets: nodame.settings.assets
      };
      results = [];
      for (config in configs) {
        app.locals[config] = {};
        results.push((function() {
          var results1;
          results1 = [];
          for (key in configs[config]) {
            results1.push(app.locals[config][key] = configs[config][key]);
          }
          return results1;
        })());
      }
      return results;
    };

    Locals.prototype.nodame = function(app, config, assets) {
      var _config, _cookies, _device, _locals, _req, _res, date, lead_zero, locale, now, thousands, time, url;
      _res = {};
      _req = {};
      _cookies = {};
      now = function() {
        return new Date();
      };
      _device = function(req) {
        var DEVICES, item, j, len, ref, src;
        DEVICES = nodame.config('devices');
        if (req.cookies[DEVICES.cookie] != null) {
          src = req.cookies[DEVICES.cookie];
          ref = DEVICES.types;
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            if (item.id === src) {
              return req.__device = item;
            }
          }
        }
        return req.__device = DEVICES._default;
      };
      time = function(num) {
        return String(num).replace(/([0-9]{2})([0-9]{2})/, '$1:$2 WIB');
      };
      lead_zero = function(num) {
        return ('0' + num).slice(-2);
      };
      date = DateParser.toString;
      thousands = function(num) {
        return Numeral(num).format(0.0);
      };
      locale = function(data) {
        var __locale_html, i, key, locales, localesData, script_content;
        __locale_html = function(__content) {
          if (__content == null) {
            __content = '';
          }
          return "<script type=\"text/javascript\">function __(a){" + __content + "}</script>";
        };
        if (data != null) {
          if (Array.isArray(data) && data.length > 0) {
            locales = {};
            for (i in data) {
              key = data[i];
              locales[key] = _res.locals.__(key);
            }
            localesData = "b=" + (JSON.stringify(locales));
            script_content = localesData + ";return b[a]";
          }
        }
        return __locale_html(script_content);
      };
      url = function() {
        var getQueries, stringify;
        ({
          base: function(uri, params) {
            uri = Path.normalize("/" + uri);
            url = "" + config.url.base + uri;
            return stringify(url, params);
          },
          assets: function(uri, params) {
            uri = Path.normalize("/" + uri);
            url = "" + config.url.assets + uri;
            return stringify(url, params);
          }
        });
        stringify = function(url, params) {
          return "" + url + (getQueries(params));
        };
        return getQueries = function(params) {
          var queries;
          queries = '';
          if (Object.keys(params).length > 0) {
            queries = "?" + (QueryString.stringify(params));
          }
          return queries;
        };
      };
      assets = function() {
        var device, mobile, ref;
        device = 'desktop';
        mobile = nodame.config('view.adaptive');
        if (((_req != null ? (ref = _req.device) != null ? ref.type : void 0 : void 0) != null) && (_req.device.type === 'phone' || _req.device.type === 'tablet') && mobile) {
          device = 'mobile';
        }
        return new Assets({
          appPath: nodame.appPath(),
          isDev: nodame.isDev(),
          url: nodame.config('url.assets'),
          assets: nodame.settings.assets,
          dir: nodame.config('assets.dir'),
          device: device
        });
      };
      _config = function(key) {
        var read;
        if (key == null) {
          return nodame.settings.config;
        }
        read = function(obj, params) {
          if (params.length === 0) {
            return obj;
          }
          if (params.length > 1) {
            obj = obj[params[0]];
            params.shift();
            return read(obj, params);
          } else {
            obj = obj[params[0]];
            return obj;
          }
        };
        return read(nodame.settings.config, key.split('.'));
      };
      _locals = function(req, res, next) {
        _res = {
          locals: res.locals
        };
        _req = {
          device: req.device
        };
        _device(req);
        app.locals.nodame = {
          now: now(),
          config: _config,
          time: time,
          leadZero: lead_zero,
          date: date,
          thousands: thousands,
          locale: locale,
          url: url,
          assets: assets(),
          device: req.__device
        };
        if (next) {
          return next();
        }
      };
      return _locals;
    };

    return Locals;

  })();

  module.exports = Locals;

}).call(this);
