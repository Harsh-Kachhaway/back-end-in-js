// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Parser, sha512;

  sha512 = require('js-sha512').sha512;

  Parser = (function() {
    function Parser() {}


    /*
     * @method Read json object by given path
     * @public
     * @param object Object
     * @param string params
     * @return object
     */

    Parser.prototype.read = function(obj, params) {
      if (obj == null) {
        throw ReferenceError('obj is undefined');
      }
      if (params == null) {
        throw ReferenceError('params is undefined');
      }
      if (typeof params === 'string') {
        params = params.split('.');
      }
      if (params.length === 0) {
        return obj;
      }
      if (params.length > 1) {
        obj = obj[params[0]];
        params.shift();
        return this.read(obj, params);
      } else {
        obj = obj[params[0]];
        return obj;
      }
    };


    /*
     * @method Parse object variable
     * @private
     * @param object Object
     * @param string params
     */

    Parser.prototype.__parse_var = function(obj, str) {
      var found, i, params, replace, search;
      found = str.match(/\{{2} *[a-z0-9._]+ *\}{2}/gi);
      if (found != null) {
        for (i in found) {
          search = found[i];
          params = search.match(/[a-z0-9._]+/i);
          if (params == null) {
            return str;
          }
          params = params[0];
          replace = this.read(this.__object, params);
          str = str.replace(search, replace);
        }
      }
      return str;
    };


    /*
     * @method Parse function
     * @private
     * @param string function name
     * @return function return
     */

    Parser.prototype.__parse_fn = function(str) {
      var found, i, replace, search, vars;
      found = str.match(/(\(.+\|[a-z_]+\))/gi);
      if (found != null) {
        for (i in found) {
          search = found[i];
          vars = search.replace(/[()]+/g, '');
          vars = vars.split('|');
          if (vars[1] === 'url_encode') {
            replace = encodeURIComponent(vars[0]);
            str = str.replace(search, replace);
          }
        }
      }
      return str;
    };


    /*
     * @method Parse object variable
     * @public
     * @param object Object
     * @param string params
     */

    Parser.prototype.parse_var = function(obj, path, root) {
      var _path, i, results;
      if (path == null) {
        path = [];
      }
      if (root == null) {
        root = true;
      }
      if (typeof obj === 'object') {
        if (root) {
          this.__object = obj;
        }
        results = [];
        for (i in obj) {
          if (typeof obj[i] === 'string') {
            obj[i] = this.__parse_var(obj, obj[i]);
            results.push(obj[i] = this.__parse_fn(obj[i]));
          } else {
            _path = path.slice();
            _path.push(i);
            results.push(this.parse_var(obj[i], _path, false));
          }
        }
        return results;
      }
    };


    /*
     * @method Parse to grunt
     * @public
     * @param obj json
     * @return obj json
     */

    Parser.prototype.to_grunt = function(json) {
      var _filepath, base_dir, base_name, dest, dest_src, filename, group, groups, grunt, hash, j, ref, ref1, ref2, type;
      grunt = {};
      for (groups in json) {
        for (group in json[groups]) {
          for (type in json[groups][group]) {
            if (grunt[type] == null) {
              grunt[type] = [];
            }
            base_name = groups + "." + group;
            hash = this.__hash("" + base_name + type, 8);
            dest = base_name + ".min." + hash + "." + type;
            dest_src = {};
            dest_src[dest] = [];
            base_dir = '';
            if (((ref = json[groups]) != null ? (ref1 = ref[group]) != null ? (ref2 = ref1[type]) != null ? ref2.length : void 0 : void 0 : void 0) > 0) {
              for (j in json[groups][group][type]) {
                filename = json[groups][group][type][j];
                if (filename != null) {
                  _filepath = "" + base_dir + json[groups][group][type][j];
                  dest_src[dest].push(_filepath);
                }
              }
              grunt[type].push(dest_src);
            }
          }
        }
      }
      return grunt;
    };


    /*
     * @method Hash grunt unique name
     * @public
     * @param str
     * @param int
     * @return hashed string
     */

    Parser.prototype.__hash = function(str, len) {
      var hash, len_med, start;
      hash = sha512("" + str + (new Date()));
      if ((len != null) && len < hash.length) {
        len_med = Math.floor(hash.length / 2);
        start = len < len_med ? len_med - Math.floor(len / 2) : 0;
        hash = hash.substr(start, len);
      }
      return hash;
    };

    return Parser;

  })();

  module.exports = new Parser();

}).call(this);
