// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Argv, Async, Config, Core, Env, Locals, Path, QueryString;

  Path = require('./path');

  Config = require('./config');

  Locals = require('./locals');

  Argv = require('./argv');

  Env = require('./env');

  QueryString = require('query-string');

  Async = require('async');

  Core = (function() {
    Core.prototype.settings = {};

    Core.prototype.hooks = {};

    Core.prototype.clients = {};

    Core.prototype.sysPath = function() {
      return Path.sys;
    };

    Core.prototype.appPath = function() {
      return Path.app;
    };

    function Core() {
      var config, release_env;
      this.settings.__systems = {};
      this.settings.__systems.argv = Argv.set();
      config = new Config(this.settings.__systems.argv, this.appPath());
      this.settings.config = config.config;
      this.settings.__systems.configPath = config.configPath;
      release_env = this.settings.config.server.release_env;
      this.settings.__systems.env = Env.set(this.settings.__systems, release_env);
    }

    Core.prototype.argv = function() {
      return this.settings.__systems.argv;
    };

    Core.prototype.client = function(key, obj) {
      this._set('clients', key, obj);
    };

    Core.prototype.hook = function(key, obj) {
      this._set('hooks', key, obj);
    };

    Core.prototype.set = function(key, obj) {
      this._set('settings', key, obj);
    };

    Core.prototype._set = function(mod, key, obj) {
      var mods;
      if (!((key != null) && (obj != null))) {
        throw new Error('Invalid settings parameters.');
      }
      mods = ['settings', 'hooks', 'clients'];
      if (mods.indexOf(mod) === -1) {
        throw new Error('Invalid module of Nodame.');
        return;
      }
      this[mod][key] = obj;
    };

    Core.prototype.express = require('express');

    Core.prototype.router = function() {
      return this.express.Router();
    };

    Core.prototype.config = function(key) {
      var read;
      if (key == null) {
        return this.settings.config;
      }
      read = function(obj, params) {
        if (params.length === 0) {
          return obj;
        }
        if (params.length > 1) {
          obj = obj[params[0]];
          params.shift();
          return read(obj, params);
        } else {
          obj = obj[params[0]];
          return obj;
        }
      };
      return read(this.settings.config, key.split('.'));
    };

    Core.prototype._getFilePath = function(mod, name) {
      return Path.safe((this.appPath()) + "/" + mod + "/" + name);
    };


    /*
     *  Native's require wrapper
     *
     *  This method is required to call nodame's modules and custom modules
     *
     *  @param {string} name Module's name or Path
     *  @return {object} module
     */

    Core.prototype.require = function(name) {
      var tags, vars;
      vars = name.split('/');
      tags = ['module', 'hook', 'service', 'middleware', 'handler'];
      if (tags.indexOf(vars[0]) !== -1) {
        return require(this._getFilePath(vars[0] + "s", vars[1]));
      }
      if (vars[0] === 'nodame') {
        name = "./" + vars[1];
      }
      return require(name);
    };


    /*
     *  Enforce mobile views
     *  Load mobile's view. This is a middleware
     *  @return {object} middleware
     */

    Core.prototype.enforce_mobile = function() {
      var Render, _enforce_mobile, config;
      config = this.config('view');
      Render = require('./render');
      _enforce_mobile = (function(_this) {
        return function(req, res, next) {
          var render;
          if (!((config.mobile != null) && (config.enforce_mobile != null))) {
            return next();
          }
          if (config.enforce_whitelist) {
            if (_this.is_whitelist(req.ips)) {
              return next();
            }
          }
          switch (config.enforce_mobile_type) {
            case 'soft':
              req.device.type = 'phone';
              break;
            case 'hard':
              req.device.type = 'desktop';
              render = new Render(req, res);
              Async.waterfall([
                function(cb) {
                  return render.cache("error:interrupt", true, cb);
                }
              ], function(err, is_cache) {
                if (!is_cache) {
                  render.path('errors/interrupt');
                }
                render.send();
                return void 0;
              });
          }
          if (next && config.enforce_mobile_type !== 'hard') {
            return next();
          }
        };
      })(this);
      return _enforce_mobile;
    };


    /*
     * Validate whitelist
     * @public
     * @param array req.ips
     * @return bool
     */

    Core.prototype.is_whitelist = function(ips) {
      if ((ips[0] != null) && this.config('server.whitelist_ips').indexOf(ips[0]) !== -1) {
        return true;
      }
      return false;
    };


    /*
     *  View's variables setter
     *
     *  Set variable to view's locals. This is a middleware.
     *
     *  @param {obj} app Express
     *  @return {object} middleware
     */

    Core.prototype.locals = function(app) {
      var assets, config, locals;
      locals = new Locals();
      config = {
        url: this.config('url'),
        app: this.config('app'),
        assets: this.config('assets')
      };
      assets = this.settings.assets;
      return locals.nodame(app, config, assets);
    };

    Core.prototype.isDev = Env.isDev;

    Core.prototype.env = Env.env;

    return Core;

  })();

  module.exports = Core;

}).call(this);
