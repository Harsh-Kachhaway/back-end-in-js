var order_id = '';
var email = '';

var cacheName = 'tiket-tokopedia-1-1';

var Path = require('./path');
var File = require('./file');

var Nodame = require('/core');
var nodame = new Nodame();
var assets_file = '.assets';
assets_stream = Path.safe(nodame.appPath() + "/configs/" + assets_file);
var assets = File.readJSON(assets_stream);

var filesToCache = [  
  '/kereta-api/ajax/home/stations/',
  '/kereta-api'
];

var length = assets.css.length;
for(var i = 0;i < length;i++){
    filesToCache.push(Object.keys(assets.css[i]))
}

length = assets.js.length;
for(var i = 0;i < length;i++){
    filesToCache.push(Object.keys(assets.js[i]))
}

console.log(filesToCache)

self.addEventListener('install', function(e) {  
  console.log('[ServiceWorker] Install');  
  e.waitUntil(  
    caches.open(cacheName).then(function(cache) {  
      console.log('[ServiceWorker] Caching app shell');  
      return cache.addAll(filesToCache);  
    })  
  );  
});

self.addEventListener('activate', function(e) {  
  console.log('[ServiceWorker] Activate');  

  e.waitUntil(  
    caches.keys().then(function(keyList) {  
      return Promise.all(keyList.map(function(key) {
        if (key !== cacheName) {  
          console.log('[ServiceWorker] Removing old cache', key);  
        
          return caches.delete(key);  
        }  
      }));  
    })  
  );  
});

self.addEventListener('fetch', function(e) {  
  console.log('[ServiceWorker] Fetch', e.request.url);  
  e.respondWith(  
    caches.match(e.request).then(function(response) {  
      return response || fetch(e.request);  
    })  
  );  
});

self.addEventListener('message', function (event) {
    var data = JSON.parse(event.data);
    var url = data.base + '/user/bookings/upcomings';
    order_id = data.order_id;
    email = data.email
    
    var title = data.title;
    if (order_id && email){
        url = data.base + '/bookings/' + order_id + '/' + email;
    }

    self.registration.showNotification(title, {
        body: data.body,
        tag: data.tag,
        icon: data.icon
    })
        
    self.addEventListener('notificationclick', function(event) {
        event.notification.close();
        event.waitUntil(
            clients.matchAll({  
                type: "window"  
            })
            .then(function(clientList) {  
                if (clients.openWindow) {
                    return clients.openWindow(url);  
                }
            })
        )
    })
})