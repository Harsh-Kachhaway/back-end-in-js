// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var Async, Render, config, error_handler, errors, getStackTrace, get_err_message, get_err_view, url;

  Render = require('./render');

  Async = require('async');

  config = nodame.config('logger');

  url = nodame.config('url');

  errors = function(app) {
    var catch_404_handler;
    catch_404_handler = function(req, res, next) {
      var err;
      err = new Error('Not Found');
      err.status = 404;
      next(err);
    };
    app.use(catch_404_handler);
    app.use(error_handler);
  };

  error_handler = function(err, req, res, next) {
    var app_name, data, err_code, err_view, render;
    err_code = err.status || 500;
    err_view = get_err_view(err_code);
    res.locals.is_error = true;
    res.status(err_code);
    data = {
      message: err_code !== 404 ? get_err_message(err.message) : 'Page Not Found',
      error: err,
      isDev: nodame.isDev()
    };
    if (!nodame.isDev()) {
      data.error = {
        status: err_code
      };
    }
    if (err_code >= 500) {
      log.critical(err_code, data.message);
    } else if (err_code === 403) {
      res.redirect(url.base);
      return;
    } else {
      log.info(err_code, data.message);
    }
    app_name = nodame.config('logger.clients.datadog.app_name');
    log.stat.increment(app_name + ".errors", ["env:" + (nodame.env()), "status:" + err_code]);
    render = new Render(req, res);
    Async.waterfall([
      (function(_this) {
        return function(cb) {
          return render.cache("error:" + err_view, true, cb);
        };
      })(this)
    ], (function(_this) {
      return function(err, is_cache) {
        if (!is_cache) {
          render.set('data', data);
          render.path("errors/" + err_view);
        }
        render.send();
        return void 0;
      };
    })(this));
    return void 0;
  };

  get_err_message = function(message) {
    return message + "\n" + (getStackTrace());
  };

  getStackTrace = function() {
    var obj;
    obj = {};
    Error.captureStackTrace(obj, getStackTrace);
    return obj.stack;
  };

  get_err_view = function(err_code) {
    errors = [403, 404, 500, 503];
    if (errors.indexOf(err_code) < 0) {
      return '500';
    } else {
      return String(err_code);
    }
  };

  module.exports = errors;

}).call(this);
