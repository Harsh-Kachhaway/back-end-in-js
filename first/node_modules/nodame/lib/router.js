// Generated by CoffeeScript 1.9.3

/*
 * @author  Argi Karunia <https://github.com/hkyo89>
 * @author  Teddy Hong <teddy.hong11@gmail.com>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

(function() {
  var MODULES, Router, Session;

  MODULES = nodame.config('module');

  Session = require('./session');

  Router = (function() {
    Router.prototype.locals = function(req, res, next) {
      if (req.query.refback != null) {
        res.locals.refback = refback;
      }
      next();
    };

    function Router(app) {
      var config, default_route, handler, middleware, mod, route;
      this.default_module = MODULES["default"];
      this.forbidden = MODULES.forbidden;
      this.modules = MODULES.items;
      this.hostname = nodame.config('url.hostname');
      this.root = "" + (nodame.config('module.root'));
      if (this.root.length > 1) {
        if (this.root[0] !== '/') {
          this.root = "/" + this.root;
        }
        if (this.root[this.root.length - 1] === '/') {
          this.root = this.root.slice(0, -1);
        }
      } else {
        if (this.root[0] === '/') {
          this.root = '';
        }
      }
      app.use((new Session()).middleware);
      for (mod in this.modules) {
        config = this.modules[mod];
        if (config.enable && module !== '__default') {
          if (config.dev_only && !nodame.isDev()) {
            continue;
          }
          handler = nodame.require("handler/" + mod);
          route = "" + this.root;
          if (mod !== this.default_module) {
            route += "/" + mod;
          } else {
            default_route = route + "/" + mod;
          }
          if (config.middleware) {
            middleware = nodame.require("middleware/" + mod);
            app.use(route + "/", middleware.init);
          }
          if (!(config.ajax && config.xhr_only)) {
            app.use(route + "/", handler);
            if (mod === this.default_module) {
              app.use(default_route + "/", handler);
            }
          }
          if (config.ajax) {
            app.use(this.root + "/ajax/" + mod + "/", handler);
          }
        }
      }
      return;
    }

    Router.prototype.redirectNotFound = function(req, res) {
      res.redirect("" + this.hostname + this.root);
      res.end;
    };

    return Router;

  })();

  module.exports = Router;

}).call(this);
