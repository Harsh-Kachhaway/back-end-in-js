// Generated by CoffeeScript 1.9.3

/*
 * @author   Argi Karunia <arugikaru@yahoo.co.jp>
 * @author   Rendy Halim <https://github.com/RendyHalim>
 * @link     https://gihtub.com/tokopedia/Nodame
 * @license  http://opensource.org/licenses/maintenance
 *
 * @version  1.2.2
 */

(function() {
  var Request, UA, measure, querystring,
    slice = [].slice;

  measure = require('measure');

  querystring = require('query-string');

  GET    = 'GET';

  POST   = 'POST';

  PUT    = 'PUT';

  DELETE = 'DELETE';

  UPDATE = 'UPDATE';

  PATCH = 'PATCH';

  UA = 'curl/7.43.0';

  Request = (function() {

    /*
     * @constructor
     * @param  string  url
     * @param  object  optional custom options
     * @throw On missing url args
     */
    function Request(url, opts) {
      if (url == null) {
        throw new Error('Missing url args');
      }
      this.__default_options(url);
      if ((opts != null) && typeof opts === 'object') {
        this.__custom_options(opts);
      }
      this.__set_client();
      this.__timeout = 5;
      return;
    }


    /*
     * @method Parse URL and assign the results to options
     * @param  string  URL
     * @private
     * @throw  On unallowed protocol
     */

    Request.prototype.__parse_url = function(url) {
      var allowed_protocol, found, port, protocol, re;
      re = /^(?:((http[s]{0,1}):\/\/))?([a-z0-9-_\.]+)(?:(:[0-9]+))?(.*)$/;
      found = url.match(re);
      protocol = found[2] || 'http';
      allowed_protocol = ['http', 'https'];
      if (allowed_protocol.indexOf(protocol) === -1) {
        throw new Error('Unallowed protocol');
      }
      if ((found != null ? found[4] : void 0) != null) {
        port = found[4];
      } else {
        port = protocol === 'http' ? '80' : '443';
      }
      this.__options = {
        protocol: protocol + ":",
        host: found[3],
        port: port.replace(':', ''),
        path: found[5],
        headers: {}
      };
    };


    /*
     * @method Set default options
     * @param  string  URL
     * @private
     */

    Request.prototype.__default_options = function(url) {
      this.__parse_url(url);
      this.__options.headers['User-Agent'] = UA;
    };


    /*
     * @method Set default options
     * @private
     */

    Request.prototype.__custom_options = function(options) {
      var option;
      for (option in options) {
        this.set(option, options.option);
      }
    };


    /*
     * @method Set request client
     * @private
     */

    Request.prototype.__set_client = function() {
      this.__client = require(this.__options.protocol.replace(':', ''));
    };


    /*
     * @method Set option
     * @param  string  key
     * @param  object  value
     * @public
     */

    Request.prototype.set = function(key, val) {
      if ((key == null) || (val == null)) {
        throw new Error('Missing args');
      }
      this.__options[key] = val;
      return this;
    };


    /*
     * @method Set header
     * @param  string  key
     * @param  string  value
     * @public
     * @throw on missing args
     */

    Request.prototype.header = function() {
      var arg, args, fn, i, key, val;
      key = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), arg = arguments[i++];
      if ((key == null) || (arg == null)) {
        throw new Error('Missing header args');
      }
      if (args.length === 0) {
        val = arg;
      } else {
        fn = arg;
        if (typeof fn !== 'function') {
          throw new TypeError('Invalid args type');
        }
        val = fn.apply(null, args);
      }
      this.__options.headers[key] = val;
      return this;
    };


    /*
     * @method Assign metric name
     * @public
     * @param  string name
     * @throw  on undefined name
     */

    Request.prototype.metric = function(name) {
      if (name == null) {
        throw new Error('Missing name args');
      }
      if (typeof name !== 'string') {
        throw new TypeError('Invalid type of name args');
      }
      this.__metric = name;
      return this;
    };


    /*
     * @method Set timeout
     * @public
     * @param  int second
     * @throw on args type is empty or not number
     */

    Request.prototype.timeout = function(second) {
      if (second == null) {
        throw new Error('Missing args');
      }
      if (typeof second !== 'number') {
        throw new TypeError('Invalid args type');
      }
      this.__timeout = second;
      return this;
    };


    /*
     * @method Assign content-type
     * @public
     * @param  string  type
     * @throw on empty type and invalid type
     */

    Request.prototype.type = function(type) {
      if (type == null) {
        throw new Error('Missing args');
      }
      if (typeof type !== 'string') {
        throw new TypeError('Invalid args type');
      }
      this.__content_type = type;
      return this;
    };


    /*
     * @method GET method
     * @public
     * @param  callback
     */

    Request.prototype.get = function(callback) {
      this.__request(GET, callback);
    };


    /*
     * @method POST method
     * @public
     * @param  callback
     */

    Request.prototype.post = function(callback) {
      this.__request(POST, callback);
    };


    /*
     * @method PUT method
     * @public
     * @param  callback
     */

    Request.prototype.put = function(callback) {
      this.__request(PUT, callback);
    };


    /*
     * @method UPDATE method
     * @public
     * @param  callback
     */

    Request.prototype.update = function(callback) {
      this.__request(UPDATE, callback);

      /*
         * @method PATCH method
         * @public
         * @param  callback
       */
    };

    Request.prototype.patch = function(callback) {
      this.__request(PATCH, callback);
    };


    /*
     * @method DELETE method
     * @public
     * @param  callback
     */

    Request.prototype["delete"] = function(callback) {
      this.__request(DELETE, callback);
    };


    /*
     * @method Set data
     * @private
     * @param  object  data
     * @param  string  type
     */

    Request.prototype.data = function(data, type) {
      if (data == null) {
        throw new Error('Missing data args');
      }
      if ((this.__content_type == null) && (type == null)) {
        type = 'json';
      }
      switch (type) {
        case 'form':
          this.header('Content-Type', 'application/x-www-form-urlencoded');
          data = querystring.stringify(data);
          break;
        case 'json':
          this.header('Content-Type', 'application/vnd.api+json');
          data = JSON.stringify(data);
          break;
        case 'xml':
          this.header('Content-Type', 'application/xml');
          data = data;
          break;
        default:
          this.header('Content-Type', type);
          data = data;
      }
      this.set('body', data);
      this.header('Content-Length', data.length);
      return this;
    };


    /*
     * @method Execute request
     * @private
     * @param  string  method
     * @param  callback
     */

    Request.prototype.__request = function(method, callback) {
      var req, response_handler, write_methods;
      this.set('method', method);
      response_handler = (function(_this) {
        return function(res) {
          var data, done;
          if (_this.__metric != null) {
            done = measure.measure('httpRequest');
          }
          data = '';
          res.on('data', function(chunk) {
            data += String(chunk);
          });
          res.on('end', function() {
            var result;
            result = _this.__parse(res.headers['content-type'], data);
            return callback(null, result);
          });
        };
      })(this);
      req = this.__client.request(this.__options, response_handler);
      req.on('error', (function(_this) {
        return function(err) {
          var error;
          error = {
            id: '110102',
            title: 'Request timeout',
            detail: "Can't reach server at " + _this.__options.protocol + "//" + _this.__options.host + ":" + _this.__options.port + _this.__options.path
          };
          if (!req.socket.destroyed) {
            console.log({
              id: error.id,
              title: error.title,
              detail: error.detail
            });
          }
        };
      })(this));
      write_methods = [POST, PUT, UPDATE, DELETE, 'PATCH'];
      if (write_methods.indexOf(this.__options.method) !== -1) {
        req.write(this.__options.body);
      }
      req.setTimeout(this.__timeout * 1000, (function(_this) {
        return function() {
          var error, result;
          error = {
            id: '110102',
            title: 'Request timeout',
            detail: "Can't reach server at " + _this.__options.protocol + "//" + _this.__options.host + ":" + _this.__options.port + _this.__options.path + " with data: " + _this.__options.body
          };
          result = {
            errors: [error]
          };
          console.log({
            id: error.id,
            title: error.title,
            detail: error.detail
          });
          req.socket.destroy();
          req.abort();
          return callback(true, result);
        };
      })(this));
      req.end();
    };


    /*
     * @method Parse response data
     * @private
     * @param  string  content-type
     * @param  object  data
     */

    Request.prototype.__parse = function(content_type, data) {
      var err, error, result;
      if (content_type == null) {
        return data;
      }
      if (((content_type != null ? content_type.match(/xml|html/) : void 0) != null) && !(data[0] === '{' || data[0] === '[')) {
        return data;
      }
      try {
        result = JSON.parse(data);
      } catch (_error) {
        err = _error;
        error = {
          id: '110101',
          title: 'Invalid response data',
          detail: "Failed in fetching data from " + this.__options.protocol + "//" + this.__options.host + ":" + this.__options.port + this.__options.path + ".\n\nResponse Data:\n" + data
        };
        result = {
          errors: [error]
        };
        console.log({
          id: error.id,
          title: error.title,
          detail: error.detail
        });
      }
      return result;
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
